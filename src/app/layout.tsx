import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import './globals.css';
import { cn } from '@/lib/utils';
import { ClerkProvider } from '@clerk/nextjs';
import { ThemeProvider } from 'next-themes';

const inter = Inter({ subsets: ['latin'], variable: '--font-sans' });

export const metadata: Metadata = {
    title: 'Create Next App',
    description: 'Generated by create next app',
};

export default function RootLayout({
    children,
}: Readonly<{
    children: React.ReactNode;
}>) {
    return (
        <ClerkProvider>
            <html lang="en" suppressHydrationWarning>
                <body
                    className={cn(
                        'min-h-screen, bg-background font-sans antialiased',
                        inter.variable,
                    )}
                >
                    <ThemeProvider
                        attribute="class"
                        defaultTheme="system"
                        enableSystem
                    >
                        {children}
                    </ThemeProvider>
                </body>
            </html>
        </ClerkProvider>
    );
}

// import React from 'react';
// import styles from './Button.module.css';

// interface ButtonProps {
//     children: React.ReactNode;
//     onClick?: () => void;
//     disabled?: boolean;
//     variant?: 'primary' | 'secondary' | 'danger';
//     size?: 'small' | 'medium' | 'large';
//     isLoading?: boolean;
// }

// const EventForm: React.FC<ButtonProps> = ({
//     children,
//     onClick,
//     disabled = false,
//     variant = 'primary',
//     size = 'medium',
//     isLoading = false,
// }) => {
//     const buttonClasses = [
//         styles.button,
//         styles[`variant-${variant}`],
//         styles[`size-${size}`],
//         disabled ? styles.disabled : '',
//         isLoading ? styles.loading : '',
//     ].join(' ');

//     return (
//         <button
//             className={buttonClasses}
//             onClick={onClick}
//             disabled={disabled || isLoading}
//             aria-busy={isLoading}
//         >
//             {isLoading ? 'Loading...' : children}
//         </button>
//     );
// };

// export default EventForm;